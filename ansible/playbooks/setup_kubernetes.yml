- name: Install Kubernetes and Configure Cluster
  hosts: all
  become: true
  tasks:

  # Install Kubernetes on All Nodes
  - name: Remove old Kubernetes repository file
    file:
      path: /etc/apt/sources.list.d/kubernetes.list
      state: absent

  - name: Remove old Kubernetes GPG key
    file:
      path: /etc/apt/keyrings/kubernetes-archive-keyring.gpg
      state: absent

  - name: Install dependencies
    apt:
      name:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg
        - lsb-release
      state: present
      update_cache: true

  - name: Create directory for apt keyrings
    file:
      path: /etc/apt/keyrings
      state: directory
      mode: '0755'

  - name: Download and dearmor Kubernetes GPG key
    shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
    args:
      executable: /bin/bash
      creates: /etc/apt/keyrings/kubernetes-archive-keyring.gpg

  - name: Add Kubernetes apt repository
    apt_repository:
      repo: deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /
      state: present
      filename: kubernetes.list
      update_cache: true

  - name: Install Kubernetes packages
    apt:
      name:
        - kubelet
        - kubeadm
        - kubectl
      state: present
      update_cache: true

  - name: Install containerd and cri-tools
    apt:
      name:
        - containerd.io
        - cri-tools
      state: present
      update_cache: true

  - name: Create containerd configuration directory
    file:
      path: /etc/containerd
      state: directory

  - name: Deploy static containerd config.toml compatible with Kubernetes
    copy:
      dest: /etc/containerd/config.toml
      content: |
        version = 2
        [plugins]
          [plugins."io.containerd.grpc.v1.cri"]
            sandbox_image = "registry.k8s.io/pause:3.9"
            [plugins."io.containerd.grpc.v1.cri".containerd]
              snapshotter = "overlayfs"
              default_runtime_name = "runc"
              no_pivot = false
            [plugins."io.containerd.grpc.v1.cri".cni]
              bin_dir = "/opt/cni/bin"
              conf_dir = "/etc/cni/net.d"
            [plugins."io.containerd.grpc.v1.cri".registry]
              [plugins."io.containerd.grpc.v1.cri".registry.mirrors]
                [plugins."io.containerd.grpc.v1.cri".registry.mirrors."docker.io"]
                  endpoint = ["https://registry-1.docker.io"]
                [plugins."io.containerd.grpc.v1.cri".registry.mirrors."registry.k8s.io"]
                  endpoint = ["https://registry.k8s.io"]
    notify: Restart containerd

  - name: Ensure br_netfilter and overlay modules are loaded
    copy:
      dest: /etc/modules-load.d/k8s.conf
      content: |
        overlay
        br_netfilter

  - name: Load br_netfilter and overlay modules
    shell: |
      modprobe overlay
      modprobe br_netfilter
    args:
      executable: /bin/bash

  - name: Apply sysctl parameters for Kubernetes
    copy:
      dest: /etc/sysctl.d/k8s.conf
      content: |
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
        net.ipv4.ip_forward = 1

  - name: Reload sysctl configuration
    command: sysctl --system

  - name: Enable and start kubelet service
    systemd:
      name: kubelet
      enabled: true
      state: started

  - name: Pre-pull Kubernetes images
    command: kubeadm config images pull

- name: Initialize Kubernetes Master Node
  hosts: kubernetes
  become: true
  tasks:
    - name: Initialize Kubernetes Master
      command: kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=CRI
      args:
        creates: /etc/kubernetes/admin.conf

    - name: Configure kubectl for user
      shell: |
        mkdir -p $HOME/.kube
        cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
        chown $(id -u):$(id -g) $HOME/.kube/config
      args:
        executable: /bin/bash

    - name: Install Calico Network Plugin
      shell: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

    - name: Generate join command for worker nodes
      shell: kubeadm token create --print-join-command
      register: kubeadm_join_cmd

    - name: Save join command
      copy:
        content: "{{ kubeadm_join_cmd.stdout }}"
        dest: /tmp/kubeadm_join_cmd.sh

    - name: Allow master node to schedule workloads
      shell: kubectl taint nodes --all node-role.kubernetes.io/control-plane- || true
      args:
        executable: /bin/bash

- name: Join Worker Nodes to Kubernetes Cluster
  hosts: all:!kubernetes
  become: true
  tasks:
    - name: Fetch kubeadm join command from master
      fetch:
        src: /tmp/kubeadm_join_cmd.sh
        dest: /tmp/kubeadm_join_cmd.sh
        flat: yes
      delegate_to: kubernetes

    - name: Join Kubernetes cluster
      shell: bash /tmp/kubeadm_join_cmd.sh

- handlers:
  - name: Restart containerd
    systemd:
      name: containerd
      state: restarted
      enabled: true
